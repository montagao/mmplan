// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan plan
//
// swagger:model plan
type Plan struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// is complete
	// Required: true
	IsComplete *bool `json:"isComplete"`

	// list1
	// Min Length: 1
	List1 string `json:"list1,omitempty"`

	// list2
	// Min Length: 1
	List2 string `json:"list2,omitempty"`

	// name1
	// Min Length: 1
	Name1 string `json:"name1,omitempty"`

	// name2
	// Min Length: 1
	Name2 string `json:"name2,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateIsComplete(formats strfmt.Registry) error {

	if err := validate.Required("isComplete", "body", m.IsComplete); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateList1(formats strfmt.Registry) error {
	if swag.IsZero(m.List1) { // not required
		return nil
	}

	if err := validate.MinLength("list1", "body", m.List1, 1); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateList2(formats strfmt.Registry) error {
	if swag.IsZero(m.List2) { // not required
		return nil
	}

	if err := validate.MinLength("list2", "body", m.List2, 1); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateName1(formats strfmt.Registry) error {
	if swag.IsZero(m.Name1) { // not required
		return nil
	}

	if err := validate.MinLength("name1", "body", m.Name1, 1); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateName2(formats strfmt.Registry) error {
	if swag.IsZero(m.Name2) { // not required
		return nil
	}

	if err := validate.MinLength("name2", "body", m.Name2, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this plan based on context it is used
func (m *Plan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
